"""
Script that gets the GHG of each company from the data files we have
"""

import csv
import pandas as pd
import openpyxl
import math
from operator import itemgetter

'''
Outer for loop loops through every year and collects the data.
'''

buildingData = pd.read_excel("data/greenhouse_data/ghgp_data_by_year.xlsx", sheet_name=0, header=3)
buildingYears = ['2019 Total reported direct emissions', '2018 Total reported direct emissions', '2017 Total reported direct emissions', '2016 Total reported direct emissions', '2015 Total reported direct emissions', '2014 Total reported direct emissions', '2013 Total reported direct emissions', '2012 Total reported direct emissions', '2011 Total reported direct emissions']

companyDict = {}
companyData = pd.read_excel("data/greenhouse_data/ghgp_data_parent_company_10_2020.xls", sheet_name=None)
sheet = ['2019', '2018', '2017', '2016','2015','2014','2013','2012','2011']

for i in range(9):
  '''
  Put the building emissions into a dictionary to easily access the data
  '''

  buildEmissions = {}
  buildEmissions.clear()

  index = 0
  for building in buildingData['Facility Id']:
    if building in buildEmissions.keys():
      buildEmissions[building] += buildingData[buildingYears[i]][index]
    else:
      buildEmissions[building] = buildingData[buildingYears[i]][index]
    index += 1

  '''
  Using the company excel data frame and the building emissions dataframe, get the emissions for a company by year
  '''

  index = 0
  for company in companyData[sheet[i]]['PARENT COMPANY NAME']:
    if company in companyDict.keys():
      if sheet[i] not in companyDict[company].keys():
        companyDict[company] = {sheet[i] : {'Emission' : 0, 'Unreported': 0}}
      if companyData[sheet[i]]['GHGRP FACILITY ID'][index] in buildEmissions.keys():
        if not math.isnan(buildEmissions[companyData[sheet[i]]['GHGRP FACILITY ID'][index]]):
          companyDict[company][sheet[i]]['Emission'] += buildEmissions[companyData[sheet[i]]['GHGRP FACILITY ID'][index]]
        else:
          companyDict[company][sheet[i]]['Unreported'] += 1
      else:
        companyDict[company][sheet[i]]['Unreported'] += 1
    else:
      if companyData[sheet[i]]['GHGRP FACILITY ID'][index] in buildEmissions.keys():
        if not math.isnan(buildEmissions[companyData[sheet[i]]['GHGRP FACILITY ID'][index]]):
          companyDict[company] = {sheet[i] : {'Emission': buildEmissions[companyData[sheet[i]]['GHGRP FACILITY ID'][index]], 'Unreported': 0}}
        else:
          companyDict[company] = {sheet[i] : {'Emission' : 0, 'Unreported': 1}}
      else:
        companyDict[company] = {sheet[i] : {'Emission' : 0, 'Unreported': 1}}

write_to_csv = []

for company in companyDict:
  year = list(companyDict[company].keys())
  write_to_csv.append([company, year[0], str(companyDict[company][year[0]]["Emission"])])

write_to_csv.sort(key=itemgetter(0))

with open('data/company_ghg.csv', 'w') as csvfile:
  writer = csv.writer(csvfile)
  writer.writerow(['Company Name', 'Year', 'Emissions'])

  for row in write_to_csv:
    writer.writerow(row)


'''
The CSV file created from the above script would have been used to match publicly traded companies to facilities
that they own across the United States (along with the emmisions coming from each facility). This would have been useful
in tracking company emissions from the years of 2011-2019 to see how the stock price of that company correlated to the emission
output of that company. Due to company size and scale, we would have compared company efficiency based on emissions/dollar of revenue
generated by that company. 

Due to the complexity of the raw data and how non-uniform the company entries were, we were unable to match the companies retrieved 
by this script to their proper stock tickers; however, if we were given more time, we would have used partial matching and percentage
correctness of companies to company stock tickers in order to match company facilities to their stocks and use the data for 
various other purposes in our app.
'''
